---
description: 
globs: 
alwaysApply: false
---
# Chrome 扩展架构

## Manifest V3 架构

这个项目基于 Chrome Manifest V3 标准构建，配置文件为 [manifest.json](mdc:src/manifest.json)。

### 权限配置
扩展需要以下权限：
- `activeTab` - 访问当前活动标签页
- `desktopCapture` - 捕获桌面/屏幕内容
- `storage` - 存储扩展数据
- `downloads` - 下载生成的 GIF 文件
- `tabCapture` - 捕获标签页内容
- `tabs` - 访问标签页信息

## 核心组件

### 1. Service Worker ([background.ts](mdc:src/background.ts))
后台服务脚本，处理：
- 扩展生命周期管理
- 屏幕捕获权限请求
- 消息传递协调
- 存储管理

### 2. Popup 界面 ([popup.ts](mdc:src/popup.ts))
用户交互界面，包含：
- 录制参数设置
- 录制控制按钮
- 状态显示
- GIF 预览和下载

### 3. Vue 组件
- **[Popup.vue](mdc:src/components/Popup.vue)** - 主弹窗组件，处理用户交互
- **[App.vue](mdc:src/components/App.vue)** - 应用根组件

## 录制工作流程

### 1. 权限请求
通过 `chrome.desktopCapture.chooseDesktopMedia()` 请求屏幕捕获权限。

### 2. 媒体流获取
使用 `navigator.mediaDevices.getDisplayMedia()` 获取屏幕流。

### 3. 录制处理
使用 `MediaRecorder` API 录制视频流。

### 4. GIF 转换
通过 [gifGenerator.ts](mdc:src/utils/gifGenerator.ts) 使用 gif.js 库将视频转换为 GIF。

### 5. 文件下载
使用 Chrome Downloads API 保存 GIF 文件到用户本地。

## Web Worker
- **gif.worker.js** - 处理 GIF 生成的计算密集型任务，避免阻塞主线程

## 消息传递
扩展各组件间通过 Chrome 消息传递 API 进行通信：
- Popup ↔ Background Script
- Content Script ↔ Background Script

## 文件组织
- **HTML 页面**: [popup.html](mdc:src/popup.html), [app.html](mdc:src/app.html)
- **脚本入口**: [popup.ts](mdc:src/popup.ts), [background.ts](mdc:src/background.ts), [app.ts](mdc:src/app.ts)
- **静态资源**: 图标文件位于 [public/icons/](mdc:src/public/icons)

