---
description:
globs:
alwaysApply: false
---
# 编码规范和最佳实践

## TypeScript 规范

### 类型定义
- 所有函数和变量都应有明确的类型定义
- 类型定义文件位于 [types/](mdc:src/types/) 目录
- 使用 `interface` 定义对象结构，使用 `type` 定义联合类型

### 配置文件
- 主配置: [tsconfig.json](mdc:tsconfig.json)
- 构建配置: [tsconfig.node.json](mdc:tsconfig.node.json)

## Vue 3 组件规范

### 组件结构
- 使用 Composition API 和 `<script setup>` 语法
- 组件文件位于 [components/](mdc:src/components/) 目录
- 主要组件：[Popup.vue](mdc:src/components/Popup.vue), [App.vue](mdc:src/components/App.vue)

### 样式
- 使用 Less CSS 预处理器
- 样式文件位于 [styles/](mdc:src/styles/) 目录
- 组件内样式使用 `<style scoped>` 确保样式隔离

## Chrome 扩展规范

### Manifest V3 标准
- 严格遵循 Chrome Manifest V3 规范
- 配置文件: [manifest.json](mdc:src/manifest.json)
- 使用 Service Worker 替代 Background Pages

### 权限管理
- 最小权限原则，只请求必要的权限
- 在 [manifest.json](mdc:src/manifest.json) 中明确声明所有权限

### 消息传递
- 使用 Chrome 扩展消息传递 API
- 异步处理所有扩展 API 调用

## 文件命名约定

### 组件文件
- Vue 组件使用 PascalCase: `Popup.vue`, `App.vue`
- TypeScript 文件使用 camelCase: `gifGenerator.ts`, `background.ts`

### 目录结构
- 功能模块分目录存放：`components/`, `utils/`, `types/`, `styles/`
- 静态资源放在 [public/](mdc:src/public/) 目录

## 错误处理

### 异步操作
- 使用 `try-catch` 包装所有异步操作
- 对 Chrome API 调用进行错误处理
- 用户友好的错误提示

### 类型安全
- 启用 TypeScript 严格模式
- 避免使用 `any` 类型
- 使用类型断言时要谨慎

## 性能优化

### GIF 生成
- 使用 Web Worker ([gif.worker.js](mdc:src/public/gif.worker.js)) 处理计算密集型任务
- 在 [gifGenerator.ts](mdc:src/utils/gifGenerator.ts) 中优化 GIF 生成参数

### 内存管理
- 及时释放媒体流资源
- 避免内存泄漏，特别是在录制和转换过程中
